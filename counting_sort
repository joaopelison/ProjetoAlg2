#include<stdio.h>
#include<stdlib.h>
#include <locale.h>

typedef struct SNo{
	int chave;
	struct SNo *prox;
}SNo;

typedef struct Lista{
	struct SNo *Inicio;
	struct SNo *Fim;
}Lista;

Lista * cria_lista(){
	Lista *L = malloc(sizeof(Lista));
	L->Inicio = L->Fim = NULL;
	return L;
	
}
void insere(int valor, Lista *L){
    SNo *Novo = malloc(sizeof(SNo));
    Novo->chave = valor;
    Novo -> prox = NULL;
	if(L->Inicio==NULL){
		L->Inicio=L->Fim=Novo;
	}
	else{
 	Novo->prox =L->Inicio; 	
	}
	L->Inicio = Novo;		
}

void imprime(Lista *L) {
	if(L->Inicio == NULL ){
		printf("Lista Vazia\n");
		return;
	}
	SNo *Novo =	L->Inicio;
	while(Novo != NULL){
		printf(" %i -> ",Novo->chave);
		Novo = Novo->prox;
	}
	printf("NULL\n");
}
	
int buscaMaior(Lista *L){
	SNo *temp = L->Inicio;
	int maior;
	maior  = temp->chave;
	temp=temp->prox;
	while(temp != NULL){
		if(temp->chave  > maior){
			maior = temp->chave;
		}
		temp = temp->prox;
	}	
	maior++;
	return maior;
}	
	
	
	
void inicializandoVet(int *vetorA, int *vetorS){
    int i, j;
    //inicializando vetores com zero 
    for(i=0;i<17;i++){
        vetorA[i] =  0;
    }
    for(i=0;i<16;i++){
        vetorS[i] =  0;
    }   
}
/*void entradaValores(int *vetorE){
    setlocale(LC_ALL, "Portuguese");
    int i;
    //Entrada de valores
    printf("Digite 16 valores positivos entre 0 e 15  \n");
    for(i=0;i<16;i++){
        scanf("%i",&vetorE[i]);
        if(vetorE[i]<0 || vetorE[i]>15){
            printf("Digite um valor válido \n");
            i--;
        }
    }
}*/
void contagemVetAux(int *vetorA, Lista *L,int tam){
   int i;
    SNo *temp = L->Inicio;
    while(temp != NULL){
    	for (i=0;i<tam;i ++){
    		if(temp->chave == i){
    			vetorA[i]++;
			}	
		}
	}
    //Fazendo a contagem de objetos do vetor auxiliar 
  /*  for(i=0;i<16;i++){
        for(j=0;j<17;j++){
            if(vetorE[i] == j){
                vetorA[j] ++;
            }
        }
    }*/
}
void modifVetAux(int *vetorA, int *vetorE, int *vetorS){
    int i;
    //Modificando vetor auxiliar de forma que cada elemento em cada indice armazena a soma das contagens anteriores 
    for(i=1;i<17;i++){
        vetorA[i] = vetorA[i]+vetorA[i-1];
    }
}
void saidaVet(int *vetorA, int *vetorE, int *vetorS){
    int i, j;
    //Utilizando vetor auxiliar para gerar a saida ordenada do nosso vetor de entrada 
    for(i=0;i<16;i++){
        for(j=0;j<17;j++){
            if(vetorE[i] == j){
                vetorS[vetorA[j]] = vetorE[i];
                vetorA[j]--;
            }   
        }
    }
}
void imprimeSaida(int *vetorS){
    setlocale(LC_ALL, "Portuguese");
    int i;
    //imprimindo a saida
    printf("\n O resultado da ordenção de forma crescente é: \n"); 
    for(i=1 ;i <16; i++){
        printf("%i <= ",vetorS[i]);
    }
    /*printf("\n O resultado da ordenção de forma decrescente é: \n"); 
    for(i=16 ;i >1; i--){
        printf("%i >= ",vetorS[i]);
    }*/
}
int main(){
    //Pedindo pro usuario mostrar o tamanho do vetor de entrada e de
    int tam;
    Lista *L1;
    L1 = cria_lista();
	setlocale(LC_ALL,"Portuguese");
	//tam = buscaMaior(L1);   
   
    // declaração de vetores
    int *vetorAux,*vetorSaida;
    /*entrada = calloc(tam, sizeof(int));
    
    inicializandoVet(vetorAux, saida);
    entradaValores(entrada);
    contagemVetAux(vetorAux, entrada);
    modifVetAux(vetorAux, entrada, saida);
    saidaVet(vetorAux, entrada, saida);
    imprimeSaida(saida);
    */
    int input, valor;
  
    while(1){
        printf("1. Insere valor na entrada \n");
        printf("2. Imprime entrada\n");
        printf("3. Termino de inserção , crie o vetor auxiliar\n");
        printf("4. modificar vetor auxiliar para ordenação\n");
		printf("5. Sair\n");
       // printf("5. Remove\n");
		printf("Option: ");
        scanf( "%d", &input);
         
        switch(input) {
            case 1:
                printf("Informe o valor a ser inserido:\n");
                scanf("%d", &valor);
                insere(valor,L1);
                break;
            case 2:
                imprime(L1);
                break;
            case 3:
                tam = buscaMaior(L1); 
				//printf("%i",tam);  
        		vetorAux = calloc(tam,sizeof(int));
                
                break;	
            case 4:
                contagemVetAux(vetorAux,L1,buscaMaior(L1));
                break;
            case 5:
                printf("Finalizando programa!\n");
                exit(1);
			default:
                printf("Digite uma opcao valida!\n");
        }
    }
	return 0;
}
